/*
https://github.com/simonebaracchi/google-sheets-openai-plugin
Google Apps Script for enabling OpenAI-powered function formulas

examples
=GPT("Give me a cupcake recipe")
=GPT_LIST("Give me 3 business ideas")
=GPT_MATRIX("Give me a carbonara recipe with this format for each step: [step description] [time required] [instruments needed]")
*/

// Replace YOUR_API_KEY with your actual OpenAI API key
var apiKey = 'YOUR_API_KEY';
var global_disable = false;

/**
 * Given the prompt, asks a question to the model.
 *
 * @param {string} prompt The question to ask.
 * @param {string=} model (Optional) The model to use; defaults to "gpt-4o-mini".
 * @return {string} The LLM answer, as a plain string.
 * @customfunction
 */
function GPT(prompt, model = "gpt-4o-mini") {
  return _invoke(prompt, model, "Just give the answer.");
}

/**
 * Given the prompt, asks a question to the model.
 *
 * @param {string} prompt The question to ask.
 * @param {string=} model (Optional) The model to use; defaults to "gpt-4o-mini".
 * @return {string} The LLM answer, as a list; it will span to below cells.
 * @customfunction
 */
function GPT_LIST(prompt, model = "gpt-4o-mini") {
  var ret = _invoke(prompt, model, "Give the answer as a flat JSON list. Must be valid JSON. Each item of the list must be a plain string. Example: [\"one\", \"two\"]");
  try {
    l = JSON.parse(ret);
  } catch (e) {
    throw new Error(e + "\nwhen parsing JSON:\n" + ret);
  }
  return l;
}

/**
 * Given the prompt, asks a yes/no question to the model.
 *
 * @param {string} prompt The question to ask.
 * @param {string=} model (Optional) The model to use; defaults to "gpt-4o-mini".
 * @return {string} Either TRUE or FALSE.
 * @customfunction
 */
function GPT_TRUEFALSE(prompt, model = "gpt-4o-mini") {
  var ret = _invoke(prompt, model, "Answer `TRUE` or `FALSE`. Motivate the answer up to 15 words. Must be valid JSON response. \
  Example: {\"answer\": \"TRUE\", \"reasoning\": \"Water is always wet.\"} \
  Example: {\"answer\": \"FALSE\", \"reasoning\": \"I wouldn't jump off a bridge even if everybody else did.\"} \
  ");

  try {
    l = JSON.parse(ret);
  } catch (e) {
    throw new Error(e + "\nwhen parsing JSON:\n" + ret);
  }
  return l['answer'] == "TRUE";
}

/**
 * Given the prompt, asks a question to the model.
 *
 * @param {string} prompt The question to ask.
 * @param {string=} model (Optional) The model to use; defaults to "gpt-4o-mini".
 * @return {string} The LLM answer, as a table; it will span to nearby cells horizontally and vertically.
 * @customfunction
 */
function GPT_MATRIX(prompt, model = "gpt-4o-mini") {
  var ret = _invoke(prompt, model, "Give the answer as a JSON list of lists. Each item of the list must be a sublist, with each element of the sublist being a plain string. Each sublist should have the same number of elements. Example: [[\"one\", \"two\"], [\"three\", \"four\"]]");
  try {
    l = JSON.parse(ret);
  } catch (e) {
    throw new Error(e + "\nwhen parsing JSON:\n" + ret);
  }
  return l;
}

function _invoke(prompt, model, system) {
  if(!prompt) {
    throw new Error("No prompt given!");
  }
  if(global_disable) {
    throw new Error("Disabled");
  }

  var apiURL = 'https://api.openai.com/v1/chat/completions';
  
  var payload = JSON.stringify({
    "model": model,
    "messages": [
      {"role": "system", "content": system + "\nNo intro, no explanation, no markdown unless explicitly requested. Be concise."},
      {"role": "user", "content": prompt}
      ],
  });
  
  var options = {
    "method": "post",
    "contentType": "application/json",
    "payload": payload,
    "headers": {
      "Authorization": "Bearer " + apiKey
    },
    "muteHttpExceptions": true
  };
  
  try {
    var response = UrlFetchApp.fetch(apiURL, options);
    var json = JSON.parse(response.getContentText());
    var resultText = json.choices[0].message.content.trim();
    
    return resultText;
  } catch (e) {
    Logger.log(e.toString());
  }
}



